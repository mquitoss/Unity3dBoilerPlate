using UnityEngine;using System.Collections;using System.Collections.Generic;/** * Busca el prefab en la carpeta Resources */public class PrefabController : GameElement{	public const string PREFAB_PATH  = "Prefabs/";	public string[] resources;		private Dictionary<string,Dictionary<string,Object>> prefabs;		void Awake()	{		prefabs = new Dictionary<string, Dictionary<string, Object>>();				for ( int i = 0; i < resources.Length; i++ ) {			string resourceName = resources[i];			prefabs[resourceName] = new Dictionary<string, Object>();			List<Object> prefabList = new List<Object>( Resources.LoadAll( PREFAB_PATH + resources[i], typeof(Object) ) );			for ( int j = 0; j < prefabList.Count; j++ ) {				Object prefab = prefabList[j];				prefabs[resourceName][prefab.name] = prefab;			}		}				//Debug.Log( toString() );	}		public GameObject getPrefabByName( string resourceName, string prefabName )	{		if ( prefabs.ContainsKey( resourceName ) ) {			if ( prefabs[resourceName].ContainsKey( prefabName ) ) {				return prefabs[resourceName][prefabName] as GameObject;			}			else {				Debug.LogError( "PrefabName '" + prefabName + "' not found" );				return null;			}		}		else {			Debug.LogError( "Resource '" + resourceName + "' not found" );			return null;		}	}         public string getRandomInstanceName( string resourceName )    {        List <string> keys = new List<string>(this.prefabs[resourceName].Keys);        int randomIdx = Random.Range(0, keys.Count);        return keys[randomIdx];    }	/**************************************************************************	 * Debug	 */		public string toString()	{		string s = "";		for ( int i = 0; i < resources.Length; i++ ) {			s += "[RESOURCE] " + resources[i] + "\n";			s += resourceToString( prefabs[resources[i]] ) + "\n";		}				return s;	}		private string resourceToString( Dictionary<string,Object> resource )	{		string s = "";		foreach ( KeyValuePair<string,Object> k in resource ) {			s += "  '" + k.Key + "'\n";		}				return s;	}}